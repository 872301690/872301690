package com.gupao.vip.student;import com.gupao.vip.exception.StudentNameFormatException;import com.gupao.vip.handler.TestHandler;import com.gupao.vip.student.Student;import com.gupao.vip.student.grading.HonorsGradingStrategy;import org.junit.Assert;import org.junit.Rule;import org.junit.Test;import org.junit.internal.runners.statements.ExpectException;import org.junit.rules.ExpectedException;import java.util.logging.Handler;import java.util.logging.Logger;public class StudentTest {    private static final double GRADE_TOLERANCE = 0.05;    @Test    public void createTest(){        final  String firstStudentName = "Jane Doe";        final  String secondStudentName = "Blow";        final  String thirdStudentName = "Raymond Douglas Davies";        Student student = new Student(firstStudentName);        Assert.assertEquals("Jane Doe",student.getName());        Assert.assertEquals("Jane",student.getFirstName());        Assert.assertEquals("Doe",student.getLastName());        Assert.assertEquals("",student.getMiddleName());        Student secondStudent = new Student(secondStudentName);        Assert.assertEquals("Blow",secondStudent.getName());        Assert.assertEquals("",secondStudent.getFirstName());        Assert.assertEquals("Blow",secondStudent.getLastName());        Assert.assertEquals("",secondStudent.getMiddleName());        Student thirdStudent = new Student(thirdStudentName);        Assert.assertEquals("Raymond Douglas Davies",thirdStudent.getName());        Assert.assertEquals("Raymond",thirdStudent.getFirstName());        Assert.assertEquals("Douglas",thirdStudent.getMiddleName());        Assert.assertEquals("Davies",thirdStudent.getLastName());        Assert.assertEquals("Jane Doe",student.getName());    }    @Test    public void other(){        char capital = 'A';        Assert.assertEquals(65,capital);        Assert.assertEquals('\u0041',capital);        Assert.assertEquals('\101',capital);    }    @Test    public void fullTime(){        Student student = new Student("a");        Assert.assertFalse(student.isFullTime());    }    @Test    public void credits(){        Student student = new Student("a");        Assert.assertEquals(0,student.getCredits());        student.addCredits(3);        Assert.assertEquals(3,student.getCredits());        student.addCredits(4);        Assert.assertEquals(7,student.getCredits());    }    @Test    public void studentStatus(){        Student student = new Student("a");        Assert.assertEquals(0,student.getCredits());        Assert.assertFalse(student.isFullTime());        student.addCredits(3);        Assert.assertEquals(3,student.getCredits());        Assert.assertFalse(student.isFullTime());        student.addCredits(4);        Assert.assertEquals(7,student.getCredits());        Assert.assertFalse(student.isFullTime());        student.addCredits(5);        Assert.assertEquals(Student.CREDITS_REQUIRED_FOR_FULL_TIME,student.getCredits());        Assert.assertTrue(student.isFullTime());    }    @Test    public void inState(){        Student student = new Student("a");        Assert.assertFalse(student.isInState());        student.setState(Student.IN_STATE);        Assert.assertTrue(student.isInState());        student.setState("MD");        Assert.assertFalse(student.isInState());    }    @Test    public void calculateGpa(){        Student student = new Student("a");        Assert.assertEquals(0.0,student.getGpa(),GRADE_TOLERANCE);        student.addGrade(Student.Grade.A);        assertGpa(4.0,student);        student.addGrade(Student.Grade.B);        assertGpa(3.5,student);        student.addGrade(Student.Grade.C);        assertGpa(3.0,student);        student.addGrade(Student.Grade.D);        assertGpa(2.5,student);        student.addGrade(Student.Grade.F);        assertGpa(2.0,student);    }    private void assertGpa( double expectedData,Student student) {        Assert.assertEquals(expectedData,student.getGpa(),GRADE_TOLERANCE);    }    @Test    public void calculateHonorStudentGpa(){        assertGpa(0.0,createHonorStudent());        assertGpa(5.0,createHonorStudent(Student.Grade.A));        assertGpa(4.0,createHonorStudent(Student.Grade.B));        assertGpa(3.0,createHonorStudent(Student.Grade.C));        assertGpa(2.0,createHonorStudent(Student.Grade.D));        assertGpa(0.0,createHonorStudent(Student.Grade.F));    }    private Student createHonorStudent(Student.Grade grade) {        Student student = createHonorStudent();        student.addGrade(grade);        return  student;    }    private Student createHonorStudent() {        Student student = new Student("a");        student.setGradingStrategy(new HonorsGradingStrategy());        return student;    }    @Test    public void charge(){        Student student = new Student("a");        student.addCharge(500);        student.addCharge(200);        student.addCharge(399);        Assert.assertEquals(1099,student.getTotalCharge());    }    @Rule    public ExpectedException exception = ExpectedException.none();    @Test    public void badFormatedName(){        Logger logger = Logger.getLogger(Student.class.getName());        Handler handler = new TestHandler();        logger.addHandler(handler);        String name = "a b c d";        exception.expect(StudentNameFormatException.class);        String msg = String.format(Student.TOO_MANY_NAME_PARTS_MSG, name, 3);        exception.expectMessage(msg);        new Student(name);        Assert.assertTrue(wasLogger(msg, (TestHandler) handler));    }    private boolean wasLogger(String msg, TestHandler handler) {        return msg.equals(handler.getMsg());    }    @Test    public void flags(){        Student student = new Student("a");        student.setFlag(Student.Flag.ON_CAMPUS,Student.Flag.TAX_EXEMPT,Student.Flag.MINOR);        Assert.assertTrue(student.isOn(Student.Flag.ON_CAMPUS));        Assert.assertTrue(student.isOn(Student.Flag.TAX_EXEMPT));        Assert.assertTrue(student.isOn(Student.Flag.MINOR));        Assert.assertFalse(student.isOff(Student.Flag.ON_CAMPUS));        Assert.assertTrue(student.isOff(Student.Flag.TROUBLEMAKER));        student.unset(Student.Flag.ON_CAMPUS);        Assert.assertTrue(student.isOn(Student.Flag.ON_CAMPUS));        Assert.assertTrue(student.isOn(Student.Flag.TAX_EXEMPT));        Assert.assertTrue(student.isOn(Student.Flag.MINOR));    }}